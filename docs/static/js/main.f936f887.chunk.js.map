{"version":3,"sources":["Components/Chat/Chat.module.scss","hoc/layout/layout.js","Components/Chat/Messages/Message/Message.js","Components/Chat/Messages/Messages.js","Components/Chat/RoomSidebar/RoomSidebar.js","Components/Chat/Chat.js","Components/Join/Join.js","App.js","serviceWorker.js","index.js","Components/Chat/RoomSidebar/RoomSidebar.module.scss","Components/Chat/Messages/Message/Message.module.scss","Components/Join/Join.module.scss","Components/Chat/Messages/Messages.module.scss"],"names":["module","exports","Layout","props","children","Message","textMessage","userName","message","messageStyle","classes","curUser","UserMessage","AdminMessage","className","Messages","userMessages","messages","map","el","ind","key","user","RoomSidebar","users","User","dot","name","usersContainer","Chat","useState","value","setValue","setName","setMessages","setUsers","useEffect","queryString","parse","window","location","search","socket","emit","off","socketURL","on","userList","submitMessage","e","preventDefault","ChatRoom","ChatLeft","ChatRight","ChatInput","action","onSubmit","type","id","autoComplete","onChange","event","target","onClick","Join","Inner","FormContainer","query","history","push","placeholder","maxLength","withRouter","setSocket","loaded","setLoaded","socketIOClient","chat","endpoint","path","render","exact","component","Boolean","hostname","match","ReactDOM","basename","process","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.f936f887.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChatRoom\":\"Chat_ChatRoom__13n-b\",\"ChatLeft\":\"Chat_ChatLeft__2zrn3\",\"ChatRight\":\"Chat_ChatRight__3kE5n\",\"Chat\":\"Chat_Chat__3xSO8\",\"ChatInput\":\"Chat_ChatInput__2mDw2\"};","import React from 'react';\r\n\r\nconst Layout = props => {\r\n  return (\r\n    <main>\r\n      {props.children}\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\nimport classes from './Message.module.scss';\r\n\r\nconst Message = props => {\r\n  let textMessage = (\r\n      <>\r\n        <p>{props.userName}</p>\r\n          <li>\r\n            <p>{props.message}</p>\r\n          </li>\r\n      </>\r\n  )\r\n  // Switches styles depending on if from user or other another room user\r\n  let messageStyle = classes.Message;\r\n  if (props.userName === props.curUser) {\r\n    messageStyle = classes.UserMessage;\r\n  }\r\n  \r\n  // A message from the system (peope joining and leaving, will be styled and look different)\r\n  if (props.userName === 'admin') {\r\n    textMessage = (\r\n      <>\r\n          <li>\r\n            <p>{props.message}</p>\r\n          </li>\r\n      </>\r\n    );\r\n    messageStyle = classes.AdminMessage;\r\n  }\r\n  return (\r\n    <div className={messageStyle}>\r\n        {textMessage}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport Message from './Message/Message.js';\r\nimport classes from './Messages.module.scss';\r\n\r\nconst Messages = props => {\r\n  const userMessages = props.messages.map((el, ind) => \r\n      <Message message={el.message} key={ind} curUser={props.curUser} userName={el.user}/>\r\n  );\r\n  return (\r\n    <ul className={classes.Messages}> \r\n      {userMessages}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default Messages;","import React from 'react';\r\nimport classes from './RoomSidebar.module.scss';\r\n\r\nconst RoomSidebar = (props) => {\r\n  const users = props.users.map((el, ind) =>\r\n    <div className={classes.User} key={ind}>\r\n      <div className={classes.dot}></div>\r\n      <li >{el.name}</li>\r\n    </div> \r\n  )\r\n  return(\r\n    <div className={classes.RoomSidebar}>\r\n      <h4>Active Users</h4>\r\n      <div className={classes.usersContainer}>\r\n        <ul>\r\n          {users}  \r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default RoomSidebar;","import React, { useState, useEffect } from 'react';\r\nimport queryString from 'query-string';\r\nimport Messages from './Messages/Messages.js';\r\nimport RoomSidebar from './RoomSidebar/RoomSidebar.js';\r\nimport classes from './Chat.module.scss';\r\n\r\nexport const Chat = props => {\r\n  const [value, setValue] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const { name } = queryString.parse(window.location.search);\r\n    setName(name);\r\n\r\n    props.socket.emit('join', { name }, () =>{\r\n      \r\n    });\r\n    // On chat unmount \r\n    return () => {\r\n      props.socket.emit('disconnect');\r\n      props.socket.off();\r\n    }\r\n  }, [props.socket, props.socketURL]);\r\n\r\n  // Syncs messages from backend to front-end. \r\n  useEffect(() => {\r\n    props.socket.on('chat message', message => setMessages([...messages, message]));\r\n  }, [props.socket, messages]);\r\n  \r\n  // Update users\r\n  useEffect(() => {\r\n    props.socket.on('get users', userList => setUsers(userList));\r\n  }, [props.socket, users]);\r\n  \r\n  // Set message and sends to backend\r\n  const submitMessage = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (value === \"\") {\r\n      return;\r\n    }\r\n\r\n    props.socket.emit('chat message', value);\r\n    \r\n    setValue(\"\");\r\n  }\r\n\r\n  return (\r\n    <div className={classes.ChatRoom}>\r\n      <div className={classes.ChatLeft}>\r\n        <RoomSidebar name={name} users={users}/>\r\n      </div>\r\n      <div className={classes.ChatRight}>\r\n        <div className={classes.Chat}>\r\n          <Messages socket={props.socket} curUser={name} messages={messages}/>\r\n        </div>\r\n        <div className={classes.ChatInput}>\r\n          <form action=\"\" onSubmit={submitMessage}>\r\n            <input type=\"text\" id=\"m\" autoComplete=\"off\" value={value} onChange={(event) => setValue(event.target.value)}/>\r\n            <button type=\"submit\" onClick={submitMessage} >Send</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chat;\r\n","import React, { useState } from 'react';\r\nimport classes from './Join.module.scss';\r\n\r\nconst Join = (props) => {\r\n  const [name, setName] = useState('');\r\n\r\n  const joinRoom = (e) => {\r\n    e.preventDefault();\r\n    const query = `?name=${name}`\r\n    props.history.push('/chat' + query);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Join}>\r\n      <div className={classes.Inner}>\r\n        <h1>Join</h1>\r\n        <div className={classes.FormContainer}>\r\n          <form onSubmit={joinRoom}>\r\n            <input placeholder=\"User\" maxLength=\"15\" type=\"text\" onChange={(event) => setName(event.target.value)} />\r\n            <button type=\"submit\">Sign In</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n\r\n}\r\n\r\n\r\nexport default Join;\r\n\r\n","import React, { useState, useEffect } from \"react\";\nimport { Switch, Route, withRouter } from 'react-router-dom';\n\nimport Layout from './hoc/layout/layout.js';\nimport Chat from './Components/Chat/Chat.js';\nimport Join from './Components/Join/Join.js';\n\nimport socketIOClient from \"socket.io-client\";\n// const socketURL = \"http://localhost:4001\";\n// Delployed\nconst socketURL = \"https://jeff-brausam-chat-application.herokuapp.com/\";\n\nfunction App() {\n  const [socket, setSocket] = useState(null);\n  const [loaded, setLoaded] = useState(false);\n\n  useEffect(() => {\n    setSocket(socketIOClient(socketURL));\n    setLoaded(true);\n  }, []);\n\n  // Once the socket loads and is set, create the Chat \n  let chat = null;\n\n  if (loaded === true) {\n    chat = <Chat socket={socket} endpoint={socketURL}/>\n  }\n\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/chat\" render={() => chat}/>\n        <Route path=\"/\" exact component={Join}/>\n      </Switch>\n    </Layout>\n  );\n}\n\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RoomSidebar\":\"RoomSidebar_RoomSidebar__3QjpI\",\"usersContainer\":\"RoomSidebar_usersContainer__17Mch\",\"User\":\"RoomSidebar_User__3AdbL\",\"dot\":\"RoomSidebar_dot__1H59N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UserMessage\":\"Message_UserMessage__2t8rn\",\"Message\":\"Message_Message__3SPfJ\",\"AdminMessage\":\"Message_AdminMessage__T1fA7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Join\":\"Join_Join__3_AnC\",\"Inner\":\"Join_Inner__1Esnm\",\"FormContainer\":\"Join_FormContainer__1s8ht\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Messages\":\"Messages_Messages__YAY87\"};"],"sourceRoot":""}